
func (d *APIDiff) StringV3() string {
	var sb strings.Builder
	sb.WriteString("\n---\n## API Changes\n")

	// Summary table
	summary := []struct {
		Name  string
		Count int
	}{
		{"Packages Added", len(d.PackagesAdded)},
		{"Packages Removed", len(d.PackagesRemoved)},
		{"Funcs Added", len(d.FuncsAdded)},
		{"Funcs Removed", len(d.FuncsRemoved)},
		{"Vars Added", len(d.VarsAdded)},
		{"Vars Removed", len(d.VarsRemoved)},
		{"Consts Added", len(d.ConstsAdded)},
		{"Consts Removed", len(d.ConstsRemoved)},
		{"Types Added", len(d.TypesAdded)},
		{"Types Removed", len(d.TypesRemoved)},
		{"Fields Added", len(d.FieldsAdded)},
		{"Fields Removed", len(d.FieldsRemoved)},
		{"Methods Added", len(d.MethodsAdded)},
		{"Methods Removed", len(d.MethodsRemoved)},
	}

	sb.WriteString("\n### Summary\n\n")
	sb.WriteString("| Kind of Change | Count |\n")
	sb.WriteString("|----------------|-------|\n")
	for _, s := range summary {
		sb.WriteString(fmt.Sprintf("| %-16s | %5d |\n", s.Name, s.Count))
	}

	// Packages added/removed
	writeSectionSimple := func(prefix string, packages []string) {
		if len(packages) == 0 {
			return
		}
		sb.WriteString(fmt.Sprintf("\n### %s\n\n", prefix))
		sorted := append([]string{}, packages...)
		sort.Strings(sorted)
		for _, pkg := range sorted {
			sb.WriteString(fmt.Sprintf("- `%s`\n", pkg))
		}
	}

	writeSectionSimple("Packages Added", d.PackagesAdded)
	writeSectionSimple("Packages Removed", d.PackagesRemoved)

	// Group APIDiffRes items by package, by label, by added/removed
	type changeKind string
	const (
		added   changeKind = "Added"
		removed changeKind = "Removed"
	)

	groupByPkgLabel := func(items []APIDiffRes, kind changeKind) map[string]map[string][]string {
		group := make(map[string]map[string][]string)
		for _, res := range items {
			if _, ok := group[res.Path]; !ok {
				group[res.Path] = make(map[string][]string)
			}
			group[res.Path][fmt.Sprintf("%s %s", kind, res.Label)] = append(group[res.Path][fmt.Sprintf("%s %s", kind, res.Label)], res.X)
		}
		return group
	}

	// Build groupings
	grouped := make(map[string]map[string][]string)
	mergeGroup := func(m map[string]map[string][]string) {
		for pkg, labels := range m {
			if _, ok := grouped[pkg]; !ok {
				grouped[pkg] = make(map[string][]string)
			}
			for label, xs := range labels {
				grouped[pkg][label] = append(grouped[pkg][label], xs...)
			}
		}
	}

	mergeGroup(groupByPkgLabel(d.FuncsAdded, added))
	mergeGroup(groupByPkgLabel(d.FuncsRemoved, removed))
	mergeGroup(groupByPkgLabel(d.VarsAdded, added))
	mergeGroup(groupByPkgLabel(d.VarsRemoved, removed))
	mergeGroup(groupByPkgLabel(d.ConstsAdded, added))
	mergeGroup(groupByPkgLabel(d.ConstsRemoved, removed))
	mergeGroup(groupByPkgLabel(d.TypesAdded, added))
	mergeGroup(groupByPkgLabel(d.TypesRemoved, removed))
	mergeGroup(groupByPkgLabel(d.FieldsAdded, added))
	mergeGroup(groupByPkgLabel(d.FieldsRemoved, removed))
	mergeGroup(groupByPkgLabel(d.MethodsAdded, added))
	mergeGroup(groupByPkgLabel(d.MethodsRemoved, removed))

	// Print per package
	if len(grouped) > 0 {
		sb.WriteString("\n### Package Changes\n")
		pkgs := make([]string, 0, len(grouped))
		for pkg := range grouped {
			pkgs = append(pkgs, pkg)
		}
		sort.Strings(pkgs)
		for _, pkg := range pkgs {
			sb.WriteString(fmt.Sprintf("\n#### Package `%s`\n", pkg))
			labels := make([]string, 0, len(grouped[pkg]))
			for label := range grouped[pkg] {
				labels = append(labels, label)
			}
			sort.Strings(labels)
			for _, label := range labels {
				sb.WriteString(fmt.Sprintf("- %s:\n", label))
				xs := grouped[pkg][label]
				sort.Strings(xs)
				for _, x := range xs {
					sb.WriteString(fmt.Sprintf("    - %s\n", x))
				}
			}
		}
	}

	return sb.String()
}

func (d *APIDiff) StringV2() string {
	var sb strings.Builder
	sb.WriteString("\n---\n## API Changes\n")

	writeSectionSimple := func(prefix string, packages []string) {
		for _, pkg := range packages {
			sb.WriteString("- ")
			sb.WriteString(prefix)
			sb.WriteString(" `")
			sb.WriteString(pkg)
			sb.WriteString("`\n")
		}
	}

	// Packages added/removed
	writeSectionSimple("Added Package", d.PackagesAdded)
	writeSectionSimple("Removed Package", d.PackagesRemoved)

	// Group APIDiffRes items by package and label
	groupAndWrite := func(title string, items []APIDiffRes) {
		if len(items) == 0 {
			return
		}

		// Map: pkg -> label -> list of X
		group := make(map[string]map[string][]string)

		for _, res := range items {
			if _, ok := group[res.Path]; !ok {
				group[res.Path] = make(map[string][]string)
			}
			group[res.Path][res.Label] = append(group[res.Path][res.Label], res.X)
		}

		// Now print per package
		sb.WriteString(fmt.Sprintf("\n### %s\n", title))
		for pkgPath, labels := range group {
			sb.WriteString(fmt.Sprintf("\n#### Package `%s`\n", pkgPath))
			for label, xs := range labels {
				sb.WriteString(fmt.Sprintf("- %s:\n", label))
				for _, x := range xs {
					sb.WriteString(fmt.Sprintf("    - %s\n", x))
				}
			}
		}
	}

	// Now print all sections using this grouping
	groupAndWrite("Funcs Added", d.FuncsAdded)
	groupAndWrite("Funcs Removed", d.FuncsRemoved)
	groupAndWrite("Vars Added", d.VarsAdded)
	groupAndWrite("Vars Removed", d.VarsRemoved)
	groupAndWrite("Consts Added", d.ConstsAdded)
	groupAndWrite("Consts Removed", d.ConstsRemoved)
	groupAndWrite("Types Added", d.TypesAdded)
	groupAndWrite("Types Removed", d.TypesRemoved)
	groupAndWrite("Fields Added", d.FieldsAdded)
	groupAndWrite("Fields Removed", d.FieldsRemoved)
	groupAndWrite("Methods Added", d.MethodsAdded)
	groupAndWrite("Methods Removed", d.MethodsRemoved)

	return sb.String()
}

func (d *APIDiff) StringV1() string {
	var sb strings.Builder
	sb.WriteString("\n---\n## API Changes\n")

	writeSection := func(prefix string, items []APIDiffRes) {
		for _, res := range items {
			sb.WriteString("- ")
			sb.WriteString(prefix)
			sb.WriteString(res.Label)
			sb.WriteString(" in `")
			sb.WriteString(res.Path)
			sb.WriteString("`: ")
			sb.WriteString(res.X)
			sb.WriteString("\n")
		}
	}

	writeSectionSimple := func(prefix string, packages []string) {
		for _, pkg := range packages {
			sb.WriteString("- ")
			sb.WriteString(prefix)
			sb.WriteString(" `")
			sb.WriteString(pkg)
			sb.WriteString("`\n")
		}
	}

	// Packages
	writeSectionSimple("Added Package", d.PackagesAdded)
	writeSectionSimple("Removed Package", d.PackagesRemoved)

	// Funcs
	writeSection("Added ", d.FuncsAdded)
	writeSection("Removed ", d.FuncsRemoved)

	// Vars
	writeSection("Added ", d.VarsAdded)
	writeSection("Removed ", d.VarsRemoved)

	// Consts
	writeSection("Added ", d.ConstsAdded)
	writeSection("Removed ", d.ConstsRemoved)

	// Types
	writeSection("Added ", d.TypesAdded)
	writeSection("Removed ", d.TypesRemoved)

	// Fields
	writeSection("Added ", d.FieldsAdded)
	writeSection("Removed ", d.FieldsRemoved)

	// Methods
	writeSection("Added ", d.MethodsAdded)
	writeSection("Removed ", d.MethodsRemoved)

	return sb.String()
}
